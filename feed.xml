<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-22T20:05:24+02:00</updated><id>/feed.xml</id><title type="html">the lit developer</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Add Prometheus support to your Golang service</title><link href="/golang/2020/04/09/golang-service-w-prometheus.html" rel="alternate" type="text/html" title="Add Prometheus support to your Golang service" /><published>2020-04-09T07:24:03+02:00</published><updated>2020-04-09T07:24:03+02:00</updated><id>/golang/2020/04/09/golang-service-w-prometheus</id><content type="html" xml:base="/golang/2020/04/09/golang-service-w-prometheus.html">&lt;p&gt;Prometheus requires its own /metrics endpoint to, you guessed it, grab metrics from your app. Fortunately, the basic integration is done in a few steps.&lt;/p&gt;

&lt;p&gt;Open a terminal in the root directory of your project and get the necessary package:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get github.com/prometheus/client_golang
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now go to the part of your project where you defined the routes and the handlers and add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;package http_handlers

import (
  &quot;net/http&quot;
  &quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;
)

func MyAwesomeFunc() error {
  ...
  http.Handle(&quot;/metrics&quot;, promhttp.Handler())
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it - you have enabled a basic set of metrics for your service! To make sure it actually works, start your application and open the appropriate address in the browser, such as “localhost:8080/metrics” or using curl:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://localhost:&amp;lt;port&amp;gt;/metrics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see something like&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile=&quot;0&quot;} 0
go_gc_duration_seconds{quantile=&quot;0.25&quot;} 0
go_gc_duration_seconds{quantile=&quot;0.5&quot;} 0
go_gc_duration_seconds{quantile=&quot;0.75&quot;} 0
go_gc_duration_seconds{quantile=&quot;1&quot;} 0
go_gc_duration_seconds_sum 0
go_gc_duration_seconds_count 0
# HELP go_goroutines Number of goroutines that currently exist.
# TYPE go_goroutines gauge
go_goroutines 8
# HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version=&quot;go1.17&quot;} 1
# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.
# TYPE go_memstats_alloc_bytes gauge
go_memstats_alloc_bytes 1.226488e+06
# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.
# TYPE go_memstats_alloc_bytes_total counter
go_memstats_alloc_bytes_total 1.226488e+06
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-your-own-metrics&quot;&gt;Adding your own metrics&lt;/h2&gt;
&lt;p&gt;It can make perfect sense to supplement the basic ones with your own metrics. You can find a good example of this directly on the &lt;a href=&quot;https://prometheus.io/docs/guides/go-application/#adding-your-own-metrics&quot;&gt;Prometheus page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prometheus-and-echo&quot;&gt;Prometheus and Echo&lt;/h2&gt;
&lt;p&gt;For users of the &lt;a href=&quot;https://echo.labstack.com/&quot;&gt;Echo framework&lt;/a&gt;, only the corresponding middleware needs to be activated:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

func main() {
  ...
  e := echo.New()
    // Enable metrics middleware
    p := prometheus.NewPrometheus(&quot;echo&quot;, nil)
    p.Use(e)

    e.Logger.Fatal(e.Start(&quot;:8080&quot;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Happy monitoring!&lt;/p&gt;</content><author><name></name></author><category term="Golang" /><summary type="html">Prometheus requires its own /metrics endpoint to, you guessed it, grab metrics from your app. Fortunately, the basic integration is done in a few steps.</summary></entry></feed>